http://stackoverflow.com/questions/1913098/what-is-the-difference-between-an-interface-and-abstract-class
https://www.google.com/search?q=abstract+vs+interface+java&es_sm=93&source=lnms&tbm=isch&sa=X&ei=T7tNVP_ePIK5yQTf5oLIBA&ved=0CAgQ_AUoAQ&biw=1687&bih=905#facrc=_&imgdii=_&imgrc=6qud71sRwPPtpM%253A%3BGN81fFD-ILhc5M%3Bhttp%253A%252F%252Fi.stack.imgur.com%252FpghvG.jpg%3Bhttp%253A%252F%252Fstackoverflow.com%252Fquestions%252F1913098%252Fwhat-is-the-difference-between-an-interface-and-abstract-class%3B677%3B427

The key technical differences between an abstract class and an interface are:

Abstract classes can have consts, members, method stubs and defined methods, whereas interfaces can only have consts and methods stubs.

Methods and members of an abstract class can be defined with any visibility, whereas all methods of an interface must be defined as public.

When inheriting an abstract class, a concrete child class must define the abstract methods, whereas an an abstract class can extend another 
abstract class and abstract methods from the parent class don't have to be defined.

Similarly, an interface extending another interface is not responsible for implementing methods from the parent interface. This is because interfaces cannot 
define any implementation.

A child class can only extend a single abstract (or any other) class, whereas an interface can extend or a class can implement multiple other interfaces.

A child class can define abstract methods with the same or less restrictive visibility, whereas a class implementing an interface must define the methods 
with the exact same visibility.